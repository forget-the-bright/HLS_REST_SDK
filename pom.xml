<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.forget-the-bright</groupId>
    <artifactId>HLS_REST_SDK</artifactId>
    <version>1.0.0</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.boot.version>2.7.13</spring.boot.version> <!-- 默认值 -->
        <spring-cloud.version>2021.0.3</spring-cloud.version>
        <swagger.core.version>1.6.2</swagger.core.version>
        <hutool.version>5.8.25</hutool.version>
        <poi.version>4.1.2</poi.version>
    </properties>
    <description>GE数据库 REST SDK</description>
    <url>https://github.com/forget-the-bright/GE_REST_SDK</url>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version> <!-- 这里的版本可以设置为一个默认值 -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringCloud 微服务 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-models</artifactId>
                <version>${swagger.core.version}</version>
                <type>pom</type> <!-- 指明这是一个 POM 文件 -->
                <scope>import</scope> <!-- 指定导入作用域 -->
            </dependency>

            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-annotations</artifactId>
                <version>${swagger.core.version}</version>
                <type>pom</type> <!-- 指明这是一个 POM 文件 -->
                <scope>import</scope> <!-- 指定导入作用域 -->
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!--使用 optional 标记的依赖不会被传递到使用该库的项目中。换句话说，当其他项目引入这个库时，Maven 不会自动引入这个可选依赖。-->
    <!--    scope 标记
    provided: 表示该依赖在编译和测试时是可用的，但在运行时不包含在最终的 JAR 文件中。一般用于 Servlet API 或其他在容器中提供的库。

    runtime: 表示该依赖在编译时不可用，但在运行时可用，适用于那些只在运行时需要的依赖。
    import: 不实际包含依赖: 使用  import作用域并不会将这些依赖实际添加到你的项目中，而是使得该 BOM 文件中定义的依赖版本可用于后续定义依赖。
    compile: 编译期引入
    -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>provided</scope>
<!--            <optional>true</optional>-->
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <optional>true</optional>
<!--            <scope>provided</scope>-->
            <version>${hutool.version}</version>
        </dependency>


        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${poi.version}</version>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.59</version>
            <optional>true</optional>
<!--            <scope>provided</scope>-->
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger.core.version}</version>
            <optional>true</optional>
<!--            <scope>provided</scope>-->
        </dependency>


        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <optional>true</optional>
<!--            <scope>provided</scope>-->
        </dependency>
    </dependencies>


    <developers>
        <developer>
            <name>wanghao</name>
            <email>helloworldwh@163.com</email>
            <url>https://github.com/forget-the-bright</url>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>The Apache Software License, Version 2.0</comments>
        </license>
    </licenses>

    <scm>
        <connection>scm:git:https://github.com/forget-the-bright/HLS_REST_SDK.git</connection>
        <developerConnection>scm:git:https://github.com/forget-the-bright/HLS_REST_SDK.git</developerConnection>
        <url>https://github.com/forget-the-bright/HLS_REST_SDK.git</url>
    </scm>

    <distributionManagement>
        <snapshotRepository>
            <id>central</id>
            <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>central</id>
            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <classifier>exec</classifier>
                    <!-- 不设置skip为false:打包的时候生成的jar包结构如下：BOOT-INF下包括了项目结构包和lib(依赖的代码jar包)，
                    最外层还有一个启动加载器类包,主要用在需求执行（运行）的jar，如果打包是一个依赖包，不需要单独运行，
                    就设置 <skip>true</skip>.如果是一个需要启动运行的jar，就不需要添加<skip>，或者设置<skip>为false。
                     -->
                    <skip>true</skip>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.sonatype.central</groupId>
                <artifactId>central-publishing-maven-plugin</artifactId>
                <version>0.4.0</version>
                <extensions>true</extensions>
                <configuration>
                    <publishingServerId>central</publishingServerId>
                    <tokenAuth>true</tokenAuth>
                    <autoPublish>true</autoPublish>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                        <configuration>
                            <keyname>${gpg.keyname}</keyname>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <source>1.8</source>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!-- ProGuard混淆插件-->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <!-- 打包的时候开始混淆-->
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <proguardVersion>6.2.2</proguardVersion>
                    <!--指定混淆的jar,如springboot打出来的jar基于它混淆-->
                    <injar>${project.build.finalName}.jar</injar>
                    <!--输出的jar-->
                    <outjar>${project.build.finalName}-pg.jar</outjar>
                    <!-- 是否混淆-->
                    <obfuscate>true</obfuscate>
                    <options>
                        <option>-target 1.8</option> <!--指定java版本号-->
                        <option>-keepdirectories</option> <!-- 保持目录结构，否则会导致spring自动装配失败 -->
                        <option>-dontshrink</option> <!--默认开启，不做收缩（删除注释、未被引用代码）-->
                        <option>-dontoptimize</option><!--默认是开启的，这里关闭字节码级别的优化-->
                        <option>-adaptclassstrings</option><!--混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代-->
                        <option>-ignorewarnings</option><!-- 忽略warn消息,如果提示org.apache.http.* 这个包里的类有问题，那么就加入下述代码：-keep class org.apache.http.** { *; }    -dontwarn org.apache.http.**-->
                        <option>-keep class org.apache.logging.log4j.util.* { *; }</option>
                        <option>-dontwarn org.apache.logging.log4j.util.**</option>
                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</option><!--对异常、注解信息在runtime予以保留，不然影响springboot启动-->

                        <!-- 保留service包中的所有类 -->
                        <option>-keep class io.github.forget_the_bright.hls.service.** { *; }</option>
                        <!-- 保留entity包中的所有类 -->
                        <option>-keep class io.github.forget_the_bright.hls.entity.** { *; }</option>

                        <option>-keep class io.github.forget_the_bright.hls.config.** { *; }</option>
<!--                        <option>-keep !@interface com.alibaba.fastjson.annotation.JSONField { *; }</option>-->
                        <!-- 保留所有interface接口的名称 -->
                        <option>-keepnames interface ** { *; }</option>

                        <!-- 保留所有set/get方法 -->
                        <option>-keepclassmembers public class * { void set*(***); *** get*(); }</option>

                        <!-- 保留service包中的方法参数名称 -->
                        <option>-keepclassmembers class io.github.forget_the_bright.hls.service.** {
                            public protected *;
                            }</option>

                        <!-- 保留带有特定注解的类成员 -->
                        <option>-keepclassmembers class * {
                            @org.springframework.beans.factory.annotation.Autowired *;
                            @org.springframework.beans.factory.annotation.Value *;
                            }
                        </option>

                        <!-- 忽略特定警告 -->
                        <option>-dontnote javax.annotation.**</option>
                        <option>-dontnote sun.applet.**</option>
                        <option>-dontnote sun.tools.jar.**</option>
                        <option>-dontnote org.apache.commons.logging.**</option>
                        <option>-dontnote javax.inject.**</option>
                        <option>-dontnote org.aopalliance.intercept.**</option>
                        <option>-dontnote org.aopalliance.aop.**</option>
                        <option>-dontnote org.apache.logging.log4j.**</option>
                        <option>-dontnote module-info</option>

                        <!-- 保留main方法的类及其方法名 -->
                        <option>-keepclasseswithmembers public class * {
                            public static void main(java.lang.String[]);
                            }
                        </option>
                    </options>
                    <libs>
                        <!-- 添加依赖 java8-->
                        <lib>${java.home}/lib/rt.jar</lib>
                        <lib>${java.home}/lib/jce.jar</lib>
                    </libs>
                </configuration>
                <dependencies>
                    <!-- https://mvnrepository.com/artifact/net.sf.proguard/proguard-base -->
                    <dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>6.2.2</version>
                    </dependency>
                </dependencies>
            </plugin>

        </plugins>
    </build>


</project>